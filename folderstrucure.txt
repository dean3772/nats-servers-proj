#/home/dean/dean/projects1/withoutbonus/ansible/playbooks/install-nats.yml
---
- name: Install and Configure NATS
  hosts: nats_cluster
  gather_facts: true
  roles:
    - nats
#
# /home/dean/dean/projects1/withoutbonus/ansible/roles/nats/handlers/main.yml---
- name: Reload systemd
  become: true
  systemd:
    daemon_reload: yes

- name: Restart NATS
  become: true
  systemd:
    name: nats-server
    state: restarted

#
# /home/dean/dean/projects1/withoutbonus/ansible/roles/nats/tasks/templates/nats.conf.j2
# NATS configuration
cluster {
  name: "nats-cluster"
  listen: 0.0.0.0:6222

  routes = [{%- for host in groups['nats_cluster'] -%}
    {%- if hostvars[host]['ansible_default_ipv4']['address'] != ansible_facts['default_ipv4']['address'] -%}
      "nats-route://{{ hostvars[host]['ansible_default_ipv4']['address'] }}:6222"{% if not loop.last %}, {% endif -%}
    {%- endif -%}
  {%- endfor %}]
}

# Monitoring
http_port: 8222

# Logging
log_file: "/var/log/nats/nats.log"
debug: true
trace: true
#
#/home/dean/dean/projects1/withoutbonus/ansible/roles/nats/tasks/main.yml
- name: Remove apt lock files
  become: true
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/var/lib/apt/lists/lock"
    - "/var/cache/apt/archives/lock"
    - "/var/lib/dpkg/lock"

- name: Update apt cache
  become: true
  apt:
    update_cache: yes
    cache_valid_time: 3600
  register: apt_result
  until: apt_result is succeeded
  retries: 5
  delay: 10

- name: Debug failed apt operation
  become: true
  command: apt-get update -o Debug::Acquire::http=true
  when: apt_result is failed

- name: Install required packages
  become: true
  apt:
    name: "{{ item }}"
  loop:
    - wget
    - gnupg
    - gnupg2

- name: Check if NATS is already installed
  become: true
  shell: "dpkg -l | grep nats-server"
  register: check_nats
  ignore_errors: true

- name: Download the NATS .deb package
  get_url:
    url: "https://github.com/nats-io/nats-server/releases/download/v2.10.1/nats-server-v2.10.1-amd64.deb"
    dest: "/tmp/nats-server.deb"
  when: check_nats.rc != 0

- name: Install the NATS .deb package
  become: true
  ansible.builtin.command:
    cmd: dpkg -i /tmp/nats-server.deb
  when: check_nats.rc != 0

- name: Ensure NATS user exists
  become: true
  user:
    name: nats
    system: yes
    create_home: no

- name: Ensure /etc/nats directory exists
  become: true
  ansible.builtin.file:
    path: /etc/nats
    state: directory
    mode: '0755'
    owner: nats

- name: Debug Jinja2 variables
  debug:
    msg: "ansible_facts default_ipv4 address: {{ ansible_facts['default_ipv4']['address'] }}, NATS Cluster: {{ groups['nats_cluster'] }}"

- name: Debug IP and Groups
  debug:
    msg: "Host IP: {{ ansible_facts['default_ipv4']['address'] }}, NATS Cluster: {{ groups['nats_cluster'] }}"

- name: Get the machine's own IP address
  setup:
    filter: ansible_default_ipv4
  register: ip_data

- name: Debug IP and Host
  debug:
    msg: "Host IP: {{ ansible_facts['default_ipv4']['address'] }}"



- name: Configure NATS for clustering
  become: true
  template:
    src: nats.conf.j2  # Make sure this is your updated template
    dest: /etc/nats/nats.conf
    owner: nats
    mode: '0644'
  notify: 
    - Reload systemd
    - Restart NATS

- name: Ensure correct permissions for NATS binary
  become: true
  file:
    path: /usr/bin/nats-server
    owner: nats
    mode: '0755'

- name: Deploy NATS Systemd service file
  become: true
  copy:
    src: nats-server.service
    dest: /etc/systemd/system/nats-server.service
    owner: root
    group: root
    mode: '0644'
  notify: 
    - Reload systemd
    - Restart NATS

- name: Reload Systemd
  become: true
  command: systemctl daemon-reload

- name: Check NATS service status
  become: true
  command: systemctl status nats-server
  register: nats_status
  changed_when: false
  failed_when: false

- name: Debug NATS service status
  debug:
    msg: "NATS service status: {{ nats_status.stdout }}"
  when: nats_status.rc != 0

- name: Autoclean for Debian/Ubuntu
  become: true
  apt:
    autoremove: yes
    autoclean: yes
  when: ansible_facts['os_family'] == "Debian"

- name: Create NATS log directory
  become: true
  file:
    path: "/var/log/nats"
    state: directory
    owner: nats

- name: Change ownership of NATS log directory
  become: true
  command: chown nats:nats /var/log/nats
#
#/home/dean/dean/projects1/withoutbonus/ansible/roles/nats/tasks/nats-server.service
[Unit]
Description=NATS Server
After=network.target

[Service]
ExecStart=/usr/bin/nats-server -c /etc/nats/nats.conf
User=nats
Restart=on-failure

[Install]
WantedBy=multi-user.target
#
# /home/dean/dean/projects1/withoutbonus/ansible/ansible.cfg
[defaults]
inventory = hosts.ini
remote_user = ubuntu
private_key_file = ~/.ssh/0923pairaws.pem
host_key_checking = False
stdout_callback = debug
forks = 20
log_path = /logfile.log
roles_path = /home/dean/dean/projects1/withoutbonus/ansible/roles
[ssh_connection]
pipelining = True
#
#/home/dean/dean/projects1/withoutbonus/python_scripts/requirements.txt
nats.py
asyncio
#
#/home/dean/dean/projects1/withoutbonus/terraform/main.tf
provider "aws" {
  region = "eu-central-1"
}

terraform {
  backend "s3" {
    bucket = "290623tfstatebucket"
    key    = "nats-cluster-project/terraform.tfstate"
    region = "eu-central-1"
  }
}

resource "aws_vpc" "nats_vpc" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = {
    Name = "nats-vpc"
  }
}

resource "aws_subnet" "nats_subnet" {
  cidr_block = "10.0.1.0/24"
  vpc_id = aws_vpc.nats_vpc.id
  map_public_ip_on_launch = true
  tags = {
    Name = "nats-subnet"
  }
}

resource "aws_security_group" "nats_sg" {
  name        = "nats-sg"
  description = "NATS Security Group"
  vpc_id = aws_vpc.nats_vpc.id

  ingress {
    from_port   = 4222
    to_port     = 4222
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  // you might want to restrict this to your IP
  }

  ingress {
    from_port   = 6222
    to_port     = 6222
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  // Open to the world, again, be cautious
  }

 ingress {
    from_port   = 8222
    to_port     = 8222
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  // Open to the world, again, be cautious
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"  // allows all protocols
    cidr_blocks = ["0.0.0.0/0"]
  }

}


resource "aws_instance" "nats_node" {
  count = 3
  ami = "ami-0e342d72b12109f91"
  instance_type = "t2.micro"
  key_name = "0923pairaws"
  subnet_id = aws_subnet.nats_subnet.id
  vpc_security_group_ids = [aws_security_group.nats_sg.id]  

  tags = {
    Name = "nats-node-${count.index}"
  }
}


output "instance_ips" {
  value = [for instance in aws_instance.nats_node : instance.public_ip]
  description = "Public IPs of the NATS nodes"
}

# Create an Internet Gateway
resource "aws_internet_gateway" "nats_igw" {
  vpc_id = aws_vpc.nats_vpc.id

  tags = {
    Name = "nats-igw"
  }
}

# Create a Route Table
resource "aws_route_table" "nats_route_table" {
  vpc_id = aws_vpc.nats_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.nats_igw.id
  }

  tags = {
    Name = "nats-route-table"
  }
}

# Associate the Route Table with the Subnet
resource "aws_route_table_association" "nats_route_table_association" {
  subnet_id      = aws_subnet.nats_subnet.id
  route_table_id = aws_route_table.nats_route_table.id
}
#
#/home/dean/dean/projects1/withoutbonus/init.sh
#!/bin/bash
export ANSIBLE_HOST_KEY_CHECKING=False

# Step 1: Provision Infrastructure
(
  cd terraform
  terraform destroy -auto-approve
  terraform apply -auto-approve
)

# Step 2: Extract IPs
ips=$(cd terraform && terraform output -json instance_ips | jq -r '.[]')

# Step 3: Update Ansible Hosts
(
  cd ansible
  echo "[nats_cluster]" > hosts.ini
  for ip in $ips; do
    echo $ip >> hosts.ini
  done
)

# Step 4: Run Ansible Playbook
(
  cd ansible
  pwd  # prints current directory
  tree # prints directory structure
  ansible-playbook -i hosts.ini playbooks/install-nats.yml -vvv # to replace this line with this ? "" ansible-playbook playbooks/install-nats.yml
)
#
